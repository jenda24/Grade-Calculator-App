"""
Grade Calculator Application

This application takes students class names and grades as input, then uses them
to calculate their average grade, and finally saves the
information to a CSV.

The application uses PyQt6.
"""

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt6 UI code generator 6.9.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

# TO-DO
# need to add headers in csv to account for the other 6 potential classes
# change names of headers to make csv look better!!

from PyQt6 import QtCore, QtGui, QtWidgets
from writetocsv import save_grades
import csv
import os


class Ui_MainWindow(object):
    """
    This class contains to logic to set up the main window of the
    Grade Calculator Application.

    It does is few things
    1. Places all of the UI elements
    2. Has logic for calulating grades
    3. Has logic for writing grades to a CSV
    """

    def setupUi(self, MainWindow) -> None:
        """
        This function is used to set up the UI components for the main window.

        :param MainWindow: The main window instance
        :return: None
        """

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(408, 530)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # student name input
        self.studentNameInput = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.studentNameInput.setGeometry(QtCore.QRect(120, 70, 211, 21))
        self.studentNameInput.setObjectName("studentNameInput")
        self.studentNameLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.studentNameLabel.setGeometry(QtCore.QRect(20, 70, 91, 16))
        self.studentNameLabel.setObjectName("studentNameLabel")

        # num classes dropdown
        self.num_classes_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.num_classes_label.setGeometry(QtCore.QRect(20, 100, 121, 16))
        self.num_classes_label.setObjectName("num_classes_label")
        self.num_classes = QtWidgets.QComboBox(parent=self.centralwidget)
        self.num_classes.setGeometry(QtCore.QRect(140, 100, 71, 26))
        self.num_classes.setObjectName("num_classes")

        # Add options for 1-6 classes
        for i in range(1, 7):
            self.num_classes.addItem("")

        # displaying final grade
        self.final_grade_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.final_grade_label.setGeometry(QtCore.QRect(230, 100, 81, 16))
        self.final_grade_label.setObjectName("final_grade_label")
        self.finalgrade_output = QtWidgets.QLabel(parent=self.centralwidget)
        self.finalgrade_output.setGeometry(QtCore.QRect(310, 100, 41, 16))
        self.finalgrade_output.setObjectName("finalgrade_output")

        # Grade Calculator label
        self.gradeCalcLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.gradeCalcLabel.setGeometry(QtCore.QRect(150, 10, 131, 31))
        self.gradeCalcLabel.setObjectName("gradeCalcLabel")

        # these lists store the values of the classes UI elements
        self.class_name_inputs = []
        self.class_grade_inputs = []
        self.class_name_labels = []
        self.class_grade_labels = []

        # creating labels and text boxes for classes 1-3
        self._setup_class_ui(0, 20, 160, "class1")
        self._setup_class_ui(1, 20, 250, "class2")
        self._setup_class_ui(2, 20, 340, "class3")

        # creating labels and text boxes for classes 4-6
        self._setup_class_ui(3, 230, 160, "class4")
        self._setup_class_ui(4, 230, 250, "class5")
        self._setup_class_ui(5, 230, 340, "class6")

        # calculate button
        self.calculate_button = QtWidgets.QPushButton(parent=self.centralwidget)
        self.calculate_button.setGeometry(QtCore.QRect(150, 400, 100, 30))
        self.calculate_button.setObjectName("calculate_button")
        self.calculate_button.clicked.connect(self.submit)

        # save button
        self.save_button = QtWidgets.QPushButton(parent=self.centralwidget)
        self.save_button.setGeometry(QtCore.QRect(260, 400, 100, 30))
        self.save_button.setObjectName("save_button")
        self.save_button.clicked.connect(self.save_to_csv)

        # status label
        self.status_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.status_label.setGeometry(QtCore.QRect(100, 440, 250, 20))
        self.status_label.setObjectName("status_label")
        self.status_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)

        # setup menu bar + status bar
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 408, 33))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        #not completely sure what this does
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # connect the dropdown change to our new method
        self.num_classes.currentIndexChanged.connect(self.update_visible_classes)

        # initialize visibility
        self.update_visible_classes()

    def _setup_class_ui(self, index, x_pos, y_pos, base_name) -> None:
        """
        Method to set up more class input UI elements
        This is more things like text labels.

        :param index: The index of the class (0-5)
        :param x_pos: The x-position of the UI elements
        :param y_pos: The y-position of the UI elements
        :param base_name: The base name for the UI elements
        :return: None
        """

        class_num = index + 1

        # class name label
        name_label = QtWidgets.QLabel(parent=self.centralwidget)
        name_label.setGeometry(QtCore.QRect(x_pos, y_pos, 121, 16))
        name_label.setObjectName(f"{base_name}_label")
        name_label.setText(f"Class {class_num} Name:")
        self.class_name_labels.append(name_label)

        # class grade label
        grade_label = QtWidgets.QLabel(parent=self.centralwidget)
        grade_label.setGeometry(QtCore.QRect(x_pos, y_pos + 20, 121, 16))
        grade_label.setObjectName(f"{base_name}_grade_label")
        grade_label.setText(f"Class {class_num} Grade:")
        self.class_grade_labels.append(grade_label)

        # class name input
        name_input = QtWidgets.QLineEdit(parent=self.centralwidget)
        name_input.setGeometry(QtCore.QRect(x_pos + 90, y_pos, 81, 21))
        name_input.setObjectName(f"{base_name}_name")
        self.class_name_inputs.append(name_input)

        # Cclass grade input
        grade_input = QtWidgets.QLineEdit(parent=self.centralwidget)
        grade_input.setGeometry(QtCore.QRect(x_pos + 90, y_pos + 20, 81, 21))
        grade_input.setObjectName(f"{base_name}_grade")
        self.class_grade_inputs.append(grade_input)

    def retranslateUi(self, MainWindow) -> None:
        """
        Used to set tthe text for the UI elements

        :param MainWindow: The main window of the application
        :return: None
        """

        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Grade Calculator"))
        self.studentNameLabel.setText(_translate("MainWindow", "Student Name:"))
        self.num_classes_label.setText(_translate("MainWindow", "Number of Classes:"))

        # Set dropdown options
        for i in range(6):
            self.num_classes.setItemText(i, _translate("MainWindow", str(i + 1)))

        self.final_grade_label.setText(_translate("MainWindow", "Final Grade:"))
        self.gradeCalcLabel.setText(_translate("MainWindow", "Grade Calculator"))
        self.finalgrade_output.setText(_translate("MainWindow", "--"))
        self.calculate_button.setText(_translate("MainWindow", "Calculate"))
        self.save_button.setText(_translate("MainWindow", "Save to CSV"))

    def update_visible_classes(self) -> None:
        """
        This function helps to show/hide classes based on the
        number of classes selected.

        :return: None
        """

        num_classes = int(self.num_classes.currentText())

        # show/hide class elements based on the number selected
        for i in range(6):
            visible = i < num_classes
            self.class_name_inputs[i].setVisible(visible)
            self.class_grade_inputs[i].setVisible(visible)
            self.class_name_labels[i].setVisible(visible)
            self.class_grade_labels[i].setVisible(visible)

    def submit(self) -> None:
        """
        This function calculate the final grade.
        It has no visual output

        :return: None
        """

        student_name = self.studentNameInput.text()
        if not student_name:
            self.status_label.setText("Please enter a student name.")
            return

        num_classes = int(self.num_classes.currentText())
        grades = []

        # Collect valid grades
        for i in range(num_classes):
            grade_text = self.class_grade_inputs[i].text()
            if grade_text:
                try:
                    grades.append(float(grade_text))
                except ValueError:
                    self.status_label.setText("Please enter a valid number.")
                    return

        # calculate average usinf valid grades
        if grades:
            average = sum(grades) / len(grades)
            self.finalgrade_output.setText(f"{average:.1f}")

        else:
            self.finalgrade_output.setText("N/A")
            self.status_label.setText("No valid grades entered.")

    def save_to_csv(self) -> None:
        """
        Save student information and grades to Grades.csv using writetocsv module!

        :return: None
        """

        # Call the save_grades function from writetocsv module
        success, message = save_grades(self)

        # update status label with the result
        self.status_label.setText(message)

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())